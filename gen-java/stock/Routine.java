/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package stock;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 * 
 * Fields can be declared "optional", which ensures they will not be included
 * in the serialized output if they aren't set.  Note that this requires some
 * manual management in some languages.
 */
public class Routine implements org.apache.thrift.TBase<Routine, Routine._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Routine");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quality", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOPBUY_FIELD_DESC = new org.apache.thrift.protocol.TField("topbuy", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField TOPSELL_FIELD_DESC = new org.apache.thrift.protocol.TField("topsell", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoutineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoutineTupleSchemeFactory());
  }

  public String code; // required
  public int price; // required
  public int quality; // required
  public Map<Integer,Integer> topbuy; // required
  public Map<Integer,Integer> topsell; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "code"),
    PRICE((short)2, "price"),
    QUALITY((short)3, "quality"),
    TOPBUY((short)4, "topbuy"),
    TOPSELL((short)5, "topsell");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // PRICE
          return PRICE;
        case 3: // QUALITY
          return QUALITY;
        case 4: // TOPBUY
          return TOPBUY;
        case 5: // TOPSELL
          return TOPSELL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private static final int __QUALITY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "security_money_t")));
    tmpMap.put(_Fields.QUALITY, new org.apache.thrift.meta_data.FieldMetaData("quality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "security_quality_t")));
    tmpMap.put(_Fields.TOPBUY, new org.apache.thrift.meta_data.FieldMetaData("topbuy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "security_money_t"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "security_quality_t"))));
    tmpMap.put(_Fields.TOPSELL, new org.apache.thrift.meta_data.FieldMetaData("topsell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "security_money_t"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "security_quality_t"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Routine.class, metaDataMap);
  }

  public Routine() {
  }

  public Routine(
    String code,
    int price,
    int quality,
    Map<Integer,Integer> topbuy,
    Map<Integer,Integer> topsell)
  {
    this();
    this.code = code;
    this.price = price;
    setPriceIsSet(true);
    this.quality = quality;
    setQualityIsSet(true);
    this.topbuy = topbuy;
    this.topsell = topsell;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Routine(Routine other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    this.price = other.price;
    this.quality = other.quality;
    if (other.isSetTopbuy()) {
      Map<Integer,Integer> __this__topbuy = new HashMap<Integer,Integer>();
      for (Map.Entry<Integer, Integer> other_element : other.topbuy.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Integer __this__topbuy_copy_key = other_element_key;

        Integer __this__topbuy_copy_value = other_element_value;

        __this__topbuy.put(__this__topbuy_copy_key, __this__topbuy_copy_value);
      }
      this.topbuy = __this__topbuy;
    }
    if (other.isSetTopsell()) {
      Map<Integer,Integer> __this__topsell = new HashMap<Integer,Integer>();
      for (Map.Entry<Integer, Integer> other_element : other.topsell.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Integer __this__topsell_copy_key = other_element_key;

        Integer __this__topsell_copy_value = other_element_value;

        __this__topsell.put(__this__topsell_copy_key, __this__topsell_copy_value);
      }
      this.topsell = __this__topsell;
    }
  }

  public Routine deepCopy() {
    return new Routine(this);
  }

  @Override
  public void clear() {
    this.code = null;
    setPriceIsSet(false);
    this.price = 0;
    setQualityIsSet(false);
    this.quality = 0;
    this.topbuy = null;
    this.topsell = null;
  }

  public String getCode() {
    return this.code;
  }

  public Routine setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public int getPrice() {
    return this.price;
  }

  public Routine setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getQuality() {
    return this.quality;
  }

  public Routine setQuality(int quality) {
    this.quality = quality;
    setQualityIsSet(true);
    return this;
  }

  public void unsetQuality() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  /** Returns true if field quality is set (has been assigned a value) and false otherwise */
  public boolean isSetQuality() {
    return EncodingUtils.testBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  public void setQualityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUALITY_ISSET_ID, value);
  }

  public int getTopbuySize() {
    return (this.topbuy == null) ? 0 : this.topbuy.size();
  }

  public void putToTopbuy(int key, int val) {
    if (this.topbuy == null) {
      this.topbuy = new HashMap<Integer,Integer>();
    }
    this.topbuy.put(key, val);
  }

  public Map<Integer,Integer> getTopbuy() {
    return this.topbuy;
  }

  public Routine setTopbuy(Map<Integer,Integer> topbuy) {
    this.topbuy = topbuy;
    return this;
  }

  public void unsetTopbuy() {
    this.topbuy = null;
  }

  /** Returns true if field topbuy is set (has been assigned a value) and false otherwise */
  public boolean isSetTopbuy() {
    return this.topbuy != null;
  }

  public void setTopbuyIsSet(boolean value) {
    if (!value) {
      this.topbuy = null;
    }
  }

  public int getTopsellSize() {
    return (this.topsell == null) ? 0 : this.topsell.size();
  }

  public void putToTopsell(int key, int val) {
    if (this.topsell == null) {
      this.topsell = new HashMap<Integer,Integer>();
    }
    this.topsell.put(key, val);
  }

  public Map<Integer,Integer> getTopsell() {
    return this.topsell;
  }

  public Routine setTopsell(Map<Integer,Integer> topsell) {
    this.topsell = topsell;
    return this;
  }

  public void unsetTopsell() {
    this.topsell = null;
  }

  /** Returns true if field topsell is set (has been assigned a value) and false otherwise */
  public boolean isSetTopsell() {
    return this.topsell != null;
  }

  public void setTopsellIsSet(boolean value) {
    if (!value) {
      this.topsell = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;

    case QUALITY:
      if (value == null) {
        unsetQuality();
      } else {
        setQuality((Integer)value);
      }
      break;

    case TOPBUY:
      if (value == null) {
        unsetTopbuy();
      } else {
        setTopbuy((Map<Integer,Integer>)value);
      }
      break;

    case TOPSELL:
      if (value == null) {
        unsetTopsell();
      } else {
        setTopsell((Map<Integer,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCode();

    case PRICE:
      return Integer.valueOf(getPrice());

    case QUALITY:
      return Integer.valueOf(getQuality());

    case TOPBUY:
      return getTopbuy();

    case TOPSELL:
      return getTopsell();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case PRICE:
      return isSetPrice();
    case QUALITY:
      return isSetQuality();
    case TOPBUY:
      return isSetTopbuy();
    case TOPSELL:
      return isSetTopsell();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Routine)
      return this.equals((Routine)that);
    return false;
  }

  public boolean equals(Routine that) {
    if (that == null)
      return false;

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_quality = true;
    boolean that_present_quality = true;
    if (this_present_quality || that_present_quality) {
      if (!(this_present_quality && that_present_quality))
        return false;
      if (this.quality != that.quality)
        return false;
    }

    boolean this_present_topbuy = true && this.isSetTopbuy();
    boolean that_present_topbuy = true && that.isSetTopbuy();
    if (this_present_topbuy || that_present_topbuy) {
      if (!(this_present_topbuy && that_present_topbuy))
        return false;
      if (!this.topbuy.equals(that.topbuy))
        return false;
    }

    boolean this_present_topsell = true && this.isSetTopsell();
    boolean that_present_topsell = true && that.isSetTopsell();
    if (this_present_topsell || that_present_topsell) {
      if (!(this_present_topsell && that_present_topsell))
        return false;
      if (!this.topsell.equals(that.topsell))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Routine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Routine typedOther = (Routine)other;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuality()).compareTo(typedOther.isSetQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quality, typedOther.quality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopbuy()).compareTo(typedOther.isSetTopbuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopbuy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topbuy, typedOther.topbuy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopsell()).compareTo(typedOther.isSetTopsell());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopsell()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topsell, typedOther.topsell);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Routine(");
    boolean first = true;

    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quality:");
    sb.append(this.quality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topbuy:");
    if (this.topbuy == null) {
      sb.append("null");
    } else {
      sb.append(this.topbuy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topsell:");
    if (this.topsell == null) {
      sb.append("null");
    } else {
      sb.append(this.topsell);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoutineStandardSchemeFactory implements SchemeFactory {
    public RoutineStandardScheme getScheme() {
      return new RoutineStandardScheme();
    }
  }

  private static class RoutineStandardScheme extends StandardScheme<Routine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Routine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.price = iprot.readI32();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quality = iprot.readI32();
              struct.setQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPBUY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.topbuy = new HashMap<Integer,Integer>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  int _key2; // optional
                  int _val3; // required
                  _key2 = iprot.readI32();
                  _val3 = iprot.readI32();
                  struct.topbuy.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setTopbuyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOPSELL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.topsell = new HashMap<Integer,Integer>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  int _key6; // optional
                  int _val7; // required
                  _key6 = iprot.readI32();
                  _val7 = iprot.readI32();
                  struct.topsell.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setTopsellIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Routine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeI32(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUALITY_FIELD_DESC);
      oprot.writeI32(struct.quality);
      oprot.writeFieldEnd();
      if (struct.topbuy != null) {
        oprot.writeFieldBegin(TOPBUY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.topbuy.size()));
          for (Map.Entry<Integer, Integer> _iter8 : struct.topbuy.entrySet())
          {
            oprot.writeI32(_iter8.getKey());
            oprot.writeI32(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.topsell != null) {
        oprot.writeFieldBegin(TOPSELL_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.topsell.size()));
          for (Map.Entry<Integer, Integer> _iter9 : struct.topsell.entrySet())
          {
            oprot.writeI32(_iter9.getKey());
            oprot.writeI32(_iter9.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoutineTupleSchemeFactory implements SchemeFactory {
    public RoutineTupleScheme getScheme() {
      return new RoutineTupleScheme();
    }
  }

  private static class RoutineTupleScheme extends TupleScheme<Routine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Routine struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCode()) {
        optionals.set(0);
      }
      if (struct.isSetPrice()) {
        optionals.set(1);
      }
      if (struct.isSetQuality()) {
        optionals.set(2);
      }
      if (struct.isSetTopbuy()) {
        optionals.set(3);
      }
      if (struct.isSetTopsell()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetPrice()) {
        oprot.writeI32(struct.price);
      }
      if (struct.isSetQuality()) {
        oprot.writeI32(struct.quality);
      }
      if (struct.isSetTopbuy()) {
        {
          oprot.writeI32(struct.topbuy.size());
          for (Map.Entry<Integer, Integer> _iter10 : struct.topbuy.entrySet())
          {
            oprot.writeI32(_iter10.getKey());
            oprot.writeI32(_iter10.getValue());
          }
        }
      }
      if (struct.isSetTopsell()) {
        {
          oprot.writeI32(struct.topsell.size());
          for (Map.Entry<Integer, Integer> _iter11 : struct.topsell.entrySet())
          {
            oprot.writeI32(_iter11.getKey());
            oprot.writeI32(_iter11.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Routine struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.price = iprot.readI32();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quality = iprot.readI32();
        struct.setQualityIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.topbuy = new HashMap<Integer,Integer>(2*_map12.size);
          for (int _i13 = 0; _i13 < _map12.size; ++_i13)
          {
            int _key14; // optional
            int _val15; // required
            _key14 = iprot.readI32();
            _val15 = iprot.readI32();
            struct.topbuy.put(_key14, _val15);
          }
        }
        struct.setTopbuyIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.topsell = new HashMap<Integer,Integer>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            int _key18; // optional
            int _val19; // required
            _key18 = iprot.readI32();
            _val19 = iprot.readI32();
            struct.topsell.put(_key18, _val19);
          }
        }
        struct.setTopsellIsSet(true);
      }
    }
  }

}

