/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package stock;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StockService {

  /**
   * Ahh, now onto the cool part, defining a service. Services just need a name
   * and can optionally inherit from another service using the extends keyword.
   */
  public interface Iface {

    /**
     * A method definition looks like C code. It has a return type, arguments,
     * and optionally a list of exceptions that it may throw. Note that argument
     * lists and exception lists are specified using the exact same syntax as
     * field lists in struct or exception definitions.
     * 
     * @param code
     */
    public Routine getRoutine(String code) throws org.apache.thrift.TException;

    public int send_quote(String code, int price, int quality, int guaranty, String client) throws org.apache.thrift.TException;

    public int withdraw_quote(String code, int refBillId, String client) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRoutine(String code, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRoutine_call> resultHandler) throws org.apache.thrift.TException;

    public void send_quote(String code, int price, int quality, int guaranty, String client, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.send_quote_call> resultHandler) throws org.apache.thrift.TException;

    public void withdraw_quote(String code, int refBillId, String client, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.withdraw_quote_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Routine getRoutine(String code) throws org.apache.thrift.TException
    {
      send_getRoutine(code);
      return recv_getRoutine();
    }

    public void send_getRoutine(String code) throws org.apache.thrift.TException
    {
      getRoutine_args args = new getRoutine_args();
      args.setCode(code);
      sendBase("getRoutine", args);
    }

    public Routine recv_getRoutine() throws org.apache.thrift.TException
    {
      getRoutine_result result = new getRoutine_result();
      receiveBase(result, "getRoutine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoutine failed: unknown result");
    }

    public int send_quote(String code, int price, int quality, int guaranty, String client) throws org.apache.thrift.TException
    {
      send_send_quote(code, price, quality, guaranty, client);
      return recv_send_quote();
    }

    public void send_send_quote(String code, int price, int quality, int guaranty, String client) throws org.apache.thrift.TException
    {
      send_quote_args args = new send_quote_args();
      args.setCode(code);
      args.setPrice(price);
      args.setQuality(quality);
      args.setGuaranty(guaranty);
      args.setClient(client);
      sendBase("send_quote", args);
    }

    public int recv_send_quote() throws org.apache.thrift.TException
    {
      send_quote_result result = new send_quote_result();
      receiveBase(result, "send_quote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "send_quote failed: unknown result");
    }

    public int withdraw_quote(String code, int refBillId, String client) throws org.apache.thrift.TException
    {
      send_withdraw_quote(code, refBillId, client);
      return recv_withdraw_quote();
    }

    public void send_withdraw_quote(String code, int refBillId, String client) throws org.apache.thrift.TException
    {
      withdraw_quote_args args = new withdraw_quote_args();
      args.setCode(code);
      args.setRefBillId(refBillId);
      args.setClient(client);
      sendBase("withdraw_quote", args);
    }

    public int recv_withdraw_quote() throws org.apache.thrift.TException
    {
      withdraw_quote_result result = new withdraw_quote_result();
      receiveBase(result, "withdraw_quote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "withdraw_quote failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRoutine(String code, org.apache.thrift.async.AsyncMethodCallback<getRoutine_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoutine_call method_call = new getRoutine_call(code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoutine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      public getRoutine_call(String code, org.apache.thrift.async.AsyncMethodCallback<getRoutine_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoutine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoutine_args args = new getRoutine_args();
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Routine getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoutine();
      }
    }

    public void send_quote(String code, int price, int quality, int guaranty, String client, org.apache.thrift.async.AsyncMethodCallback<send_quote_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      send_quote_call method_call = new send_quote_call(code, price, quality, guaranty, client, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class send_quote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int price;
      private int quality;
      private int guaranty;
      private String client;
      public send_quote_call(String code, int price, int quality, int guaranty, String client, org.apache.thrift.async.AsyncMethodCallback<send_quote_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.price = price;
        this.quality = quality;
        this.guaranty = guaranty;
        this.client = client;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("send_quote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        send_quote_args args = new send_quote_args();
        args.setCode(code);
        args.setPrice(price);
        args.setQuality(quality);
        args.setGuaranty(guaranty);
        args.setClient(client);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_send_quote();
      }
    }

    public void withdraw_quote(String code, int refBillId, String client, org.apache.thrift.async.AsyncMethodCallback<withdraw_quote_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      withdraw_quote_call method_call = new withdraw_quote_call(code, refBillId, client, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class withdraw_quote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int refBillId;
      private String client;
      public withdraw_quote_call(String code, int refBillId, String client, org.apache.thrift.async.AsyncMethodCallback<withdraw_quote_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.refBillId = refBillId;
        this.client = client;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("withdraw_quote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        withdraw_quote_args args = new withdraw_quote_args();
        args.setCode(code);
        args.setRefBillId(refBillId);
        args.setClient(client);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_withdraw_quote();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRoutine", new getRoutine());
      processMap.put("send_quote", new send_quote());
      processMap.put("withdraw_quote", new withdraw_quote());
      return processMap;
    }

    public static class getRoutine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoutine_args> {
      public getRoutine() {
        super("getRoutine");
      }

      public getRoutine_args getEmptyArgsInstance() {
        return new getRoutine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoutine_result getResult(I iface, getRoutine_args args) throws org.apache.thrift.TException {
        getRoutine_result result = new getRoutine_result();
        result.success = iface.getRoutine(args.code);
        return result;
      }
    }

    public static class send_quote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_quote_args> {
      public send_quote() {
        super("send_quote");
      }

      public send_quote_args getEmptyArgsInstance() {
        return new send_quote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public send_quote_result getResult(I iface, send_quote_args args) throws org.apache.thrift.TException {
        send_quote_result result = new send_quote_result();
        result.success = iface.send_quote(args.code, args.price, args.quality, args.guaranty, args.client);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class withdraw_quote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, withdraw_quote_args> {
      public withdraw_quote() {
        super("withdraw_quote");
      }

      public withdraw_quote_args getEmptyArgsInstance() {
        return new withdraw_quote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public withdraw_quote_result getResult(I iface, withdraw_quote_args args) throws org.apache.thrift.TException {
        withdraw_quote_result result = new withdraw_quote_result();
        result.success = iface.withdraw_quote(args.code, args.refBillId, args.client);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class getRoutine_args implements org.apache.thrift.TBase<getRoutine_args, getRoutine_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoutine_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoutine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoutine_argsTupleSchemeFactory());
    }

    public String code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoutine_args.class, metaDataMap);
    }

    public getRoutine_args() {
    }

    public getRoutine_args(
      String code)
    {
      this();
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoutine_args(getRoutine_args other) {
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public getRoutine_args deepCopy() {
      return new getRoutine_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
    }

    public String getCode() {
      return this.code;
    }

    public getRoutine_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoutine_args)
        return this.equals((getRoutine_args)that);
      return false;
    }

    public boolean equals(getRoutine_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRoutine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRoutine_args typedOther = (getRoutine_args)other;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoutine_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoutine_argsStandardSchemeFactory implements SchemeFactory {
      public getRoutine_argsStandardScheme getScheme() {
        return new getRoutine_argsStandardScheme();
      }
    }

    private static class getRoutine_argsStandardScheme extends StandardScheme<getRoutine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoutine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoutine_argsTupleSchemeFactory implements SchemeFactory {
      public getRoutine_argsTupleScheme getScheme() {
        return new getRoutine_argsTupleScheme();
      }
    }

    private static class getRoutine_argsTupleScheme extends TupleScheme<getRoutine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoutine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoutine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

  }

  public static class getRoutine_result implements org.apache.thrift.TBase<getRoutine_result, getRoutine_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoutine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoutine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoutine_resultTupleSchemeFactory());
    }

    public Routine success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Routine.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoutine_result.class, metaDataMap);
    }

    public getRoutine_result() {
    }

    public getRoutine_result(
      Routine success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoutine_result(getRoutine_result other) {
      if (other.isSetSuccess()) {
        this.success = new Routine(other.success);
      }
    }

    public getRoutine_result deepCopy() {
      return new getRoutine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Routine getSuccess() {
      return this.success;
    }

    public getRoutine_result setSuccess(Routine success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Routine)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoutine_result)
        return this.equals((getRoutine_result)that);
      return false;
    }

    public boolean equals(getRoutine_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRoutine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRoutine_result typedOther = (getRoutine_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoutine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoutine_resultStandardSchemeFactory implements SchemeFactory {
      public getRoutine_resultStandardScheme getScheme() {
        return new getRoutine_resultStandardScheme();
      }
    }

    private static class getRoutine_resultStandardScheme extends StandardScheme<getRoutine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Routine();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoutine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoutine_resultTupleSchemeFactory implements SchemeFactory {
      public getRoutine_resultTupleScheme getScheme() {
        return new getRoutine_resultTupleScheme();
      }
    }

    private static class getRoutine_resultTupleScheme extends TupleScheme<getRoutine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoutine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoutine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Routine();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class send_quote_args implements org.apache.thrift.TBase<send_quote_args, send_quote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_quote_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quality", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField GUARANTY_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranty", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField CLIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("client", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_quote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_quote_argsTupleSchemeFactory());
    }

    public String code; // required
    public int price; // required
    public int quality; // required
    public int guaranty; // required
    public String client; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      PRICE((short)2, "price"),
      QUALITY((short)3, "quality"),
      GUARANTY((short)4, "guaranty"),
      CLIENT((short)5, "client");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // PRICE
            return PRICE;
          case 3: // QUALITY
            return QUALITY;
          case 4: // GUARANTY
            return GUARANTY;
          case 5: // CLIENT
            return CLIENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRICE_ISSET_ID = 0;
    private static final int __QUALITY_ISSET_ID = 1;
    private static final int __GUARANTY_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "security_money_t")));
      tmpMap.put(_Fields.QUALITY, new org.apache.thrift.meta_data.FieldMetaData("quality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "security_quality_t")));
      tmpMap.put(_Fields.GUARANTY, new org.apache.thrift.meta_data.FieldMetaData("guaranty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "security_money_t")));
      tmpMap.put(_Fields.CLIENT, new org.apache.thrift.meta_data.FieldMetaData("client", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_quote_args.class, metaDataMap);
    }

    public send_quote_args() {
    }

    public send_quote_args(
      String code,
      int price,
      int quality,
      int guaranty,
      String client)
    {
      this();
      this.code = code;
      this.price = price;
      setPriceIsSet(true);
      this.quality = quality;
      setQualityIsSet(true);
      this.guaranty = guaranty;
      setGuarantyIsSet(true);
      this.client = client;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_quote_args(send_quote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.price = other.price;
      this.quality = other.quality;
      this.guaranty = other.guaranty;
      if (other.isSetClient()) {
        this.client = other.client;
      }
    }

    public send_quote_args deepCopy() {
      return new send_quote_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
      setPriceIsSet(false);
      this.price = 0;
      setQualityIsSet(false);
      this.quality = 0;
      setGuarantyIsSet(false);
      this.guaranty = 0;
      this.client = null;
    }

    public String getCode() {
      return this.code;
    }

    public send_quote_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getPrice() {
      return this.price;
    }

    public send_quote_args setPrice(int price) {
      this.price = price;
      setPriceIsSet(true);
      return this;
    }

    public void unsetPrice() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    /** Returns true if field price is set (has been assigned a value) and false otherwise */
    public boolean isSetPrice() {
      return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    public void setPriceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
    }

    public int getQuality() {
      return this.quality;
    }

    public send_quote_args setQuality(int quality) {
      this.quality = quality;
      setQualityIsSet(true);
      return this;
    }

    public void unsetQuality() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUALITY_ISSET_ID);
    }

    /** Returns true if field quality is set (has been assigned a value) and false otherwise */
    public boolean isSetQuality() {
      return EncodingUtils.testBit(__isset_bitfield, __QUALITY_ISSET_ID);
    }

    public void setQualityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUALITY_ISSET_ID, value);
    }

    public int getGuaranty() {
      return this.guaranty;
    }

    public send_quote_args setGuaranty(int guaranty) {
      this.guaranty = guaranty;
      setGuarantyIsSet(true);
      return this;
    }

    public void unsetGuaranty() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUARANTY_ISSET_ID);
    }

    /** Returns true if field guaranty is set (has been assigned a value) and false otherwise */
    public boolean isSetGuaranty() {
      return EncodingUtils.testBit(__isset_bitfield, __GUARANTY_ISSET_ID);
    }

    public void setGuarantyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUARANTY_ISSET_ID, value);
    }

    public String getClient() {
      return this.client;
    }

    public send_quote_args setClient(String client) {
      this.client = client;
      return this;
    }

    public void unsetClient() {
      this.client = null;
    }

    /** Returns true if field client is set (has been assigned a value) and false otherwise */
    public boolean isSetClient() {
      return this.client != null;
    }

    public void setClientIsSet(boolean value) {
      if (!value) {
        this.client = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          setPrice((Integer)value);
        }
        break;

      case QUALITY:
        if (value == null) {
          unsetQuality();
        } else {
          setQuality((Integer)value);
        }
        break;

      case GUARANTY:
        if (value == null) {
          unsetGuaranty();
        } else {
          setGuaranty((Integer)value);
        }
        break;

      case CLIENT:
        if (value == null) {
          unsetClient();
        } else {
          setClient((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case PRICE:
        return Integer.valueOf(getPrice());

      case QUALITY:
        return Integer.valueOf(getQuality());

      case GUARANTY:
        return Integer.valueOf(getGuaranty());

      case CLIENT:
        return getClient();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case PRICE:
        return isSetPrice();
      case QUALITY:
        return isSetQuality();
      case GUARANTY:
        return isSetGuaranty();
      case CLIENT:
        return isSetClient();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_quote_args)
        return this.equals((send_quote_args)that);
      return false;
    }

    public boolean equals(send_quote_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_price = true;
      boolean that_present_price = true;
      if (this_present_price || that_present_price) {
        if (!(this_present_price && that_present_price))
          return false;
        if (this.price != that.price)
          return false;
      }

      boolean this_present_quality = true;
      boolean that_present_quality = true;
      if (this_present_quality || that_present_quality) {
        if (!(this_present_quality && that_present_quality))
          return false;
        if (this.quality != that.quality)
          return false;
      }

      boolean this_present_guaranty = true;
      boolean that_present_guaranty = true;
      if (this_present_guaranty || that_present_guaranty) {
        if (!(this_present_guaranty && that_present_guaranty))
          return false;
        if (this.guaranty != that.guaranty)
          return false;
      }

      boolean this_present_client = true && this.isSetClient();
      boolean that_present_client = true && that.isSetClient();
      if (this_present_client || that_present_client) {
        if (!(this_present_client && that_present_client))
          return false;
        if (!this.client.equals(that.client))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(send_quote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      send_quote_args typedOther = (send_quote_args)other;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuality()).compareTo(typedOther.isSetQuality());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuality()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quality, typedOther.quality);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuaranty()).compareTo(typedOther.isSetGuaranty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuaranty()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranty, typedOther.guaranty);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClient()).compareTo(typedOther.isSetClient());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClient()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client, typedOther.client);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_quote_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
      if (!first) sb.append(", ");
      sb.append("quality:");
      sb.append(this.quality);
      first = false;
      if (!first) sb.append(", ");
      sb.append("guaranty:");
      sb.append(this.guaranty);
      first = false;
      if (!first) sb.append(", ");
      sb.append("client:");
      if (this.client == null) {
        sb.append("null");
      } else {
        sb.append(this.client);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_quote_argsStandardSchemeFactory implements SchemeFactory {
      public send_quote_argsStandardScheme getScheme() {
        return new send_quote_argsStandardScheme();
      }
    }

    private static class send_quote_argsStandardScheme extends StandardScheme<send_quote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_quote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRICE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.price = iprot.readI32();
                struct.setPriceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QUALITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.quality = iprot.readI32();
                struct.setQualityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GUARANTY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.guaranty = iprot.readI32();
                struct.setGuarantyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CLIENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.client = iprot.readString();
                struct.setClientIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_quote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeI32(struct.price);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUALITY_FIELD_DESC);
        oprot.writeI32(struct.quality);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GUARANTY_FIELD_DESC);
        oprot.writeI32(struct.guaranty);
        oprot.writeFieldEnd();
        if (struct.client != null) {
          oprot.writeFieldBegin(CLIENT_FIELD_DESC);
          oprot.writeString(struct.client);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_quote_argsTupleSchemeFactory implements SchemeFactory {
      public send_quote_argsTupleScheme getScheme() {
        return new send_quote_argsTupleScheme();
      }
    }

    private static class send_quote_argsTupleScheme extends TupleScheme<send_quote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_quote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetPrice()) {
          optionals.set(1);
        }
        if (struct.isSetQuality()) {
          optionals.set(2);
        }
        if (struct.isSetGuaranty()) {
          optionals.set(3);
        }
        if (struct.isSetClient()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetPrice()) {
          oprot.writeI32(struct.price);
        }
        if (struct.isSetQuality()) {
          oprot.writeI32(struct.quality);
        }
        if (struct.isSetGuaranty()) {
          oprot.writeI32(struct.guaranty);
        }
        if (struct.isSetClient()) {
          oprot.writeString(struct.client);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_quote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.price = iprot.readI32();
          struct.setPriceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.quality = iprot.readI32();
          struct.setQualityIsSet(true);
        }
        if (incoming.get(3)) {
          struct.guaranty = iprot.readI32();
          struct.setGuarantyIsSet(true);
        }
        if (incoming.get(4)) {
          struct.client = iprot.readString();
          struct.setClientIsSet(true);
        }
      }
    }

  }

  public static class send_quote_result implements org.apache.thrift.TBase<send_quote_result, send_quote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_quote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_quote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_quote_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_quote_result.class, metaDataMap);
    }

    public send_quote_result() {
    }

    public send_quote_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_quote_result(send_quote_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public send_quote_result deepCopy() {
      return new send_quote_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public send_quote_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_quote_result)
        return this.equals((send_quote_result)that);
      return false;
    }

    public boolean equals(send_quote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(send_quote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      send_quote_result typedOther = (send_quote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_quote_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_quote_resultStandardSchemeFactory implements SchemeFactory {
      public send_quote_resultStandardScheme getScheme() {
        return new send_quote_resultStandardScheme();
      }
    }

    private static class send_quote_resultStandardScheme extends StandardScheme<send_quote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_quote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_quote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_quote_resultTupleSchemeFactory implements SchemeFactory {
      public send_quote_resultTupleScheme getScheme() {
        return new send_quote_resultTupleScheme();
      }
    }

    private static class send_quote_resultTupleScheme extends TupleScheme<send_quote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_quote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_quote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class withdraw_quote_args implements org.apache.thrift.TBase<withdraw_quote_args, withdraw_quote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdraw_quote_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REF_BILL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refBillId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("client", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new withdraw_quote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new withdraw_quote_argsTupleSchemeFactory());
    }

    public String code; // required
    public int refBillId; // required
    public String client; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      REF_BILL_ID((short)2, "refBillId"),
      CLIENT((short)3, "client");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // REF_BILL_ID
            return REF_BILL_ID;
          case 3: // CLIENT
            return CLIENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REFBILLID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REF_BILL_ID, new org.apache.thrift.meta_data.FieldMetaData("refBillId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT, new org.apache.thrift.meta_data.FieldMetaData("client", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdraw_quote_args.class, metaDataMap);
    }

    public withdraw_quote_args() {
    }

    public withdraw_quote_args(
      String code,
      int refBillId,
      String client)
    {
      this();
      this.code = code;
      this.refBillId = refBillId;
      setRefBillIdIsSet(true);
      this.client = client;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public withdraw_quote_args(withdraw_quote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.refBillId = other.refBillId;
      if (other.isSetClient()) {
        this.client = other.client;
      }
    }

    public withdraw_quote_args deepCopy() {
      return new withdraw_quote_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
      setRefBillIdIsSet(false);
      this.refBillId = 0;
      this.client = null;
    }

    public String getCode() {
      return this.code;
    }

    public withdraw_quote_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getRefBillId() {
      return this.refBillId;
    }

    public withdraw_quote_args setRefBillId(int refBillId) {
      this.refBillId = refBillId;
      setRefBillIdIsSet(true);
      return this;
    }

    public void unsetRefBillId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFBILLID_ISSET_ID);
    }

    /** Returns true if field refBillId is set (has been assigned a value) and false otherwise */
    public boolean isSetRefBillId() {
      return EncodingUtils.testBit(__isset_bitfield, __REFBILLID_ISSET_ID);
    }

    public void setRefBillIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFBILLID_ISSET_ID, value);
    }

    public String getClient() {
      return this.client;
    }

    public withdraw_quote_args setClient(String client) {
      this.client = client;
      return this;
    }

    public void unsetClient() {
      this.client = null;
    }

    /** Returns true if field client is set (has been assigned a value) and false otherwise */
    public boolean isSetClient() {
      return this.client != null;
    }

    public void setClientIsSet(boolean value) {
      if (!value) {
        this.client = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case REF_BILL_ID:
        if (value == null) {
          unsetRefBillId();
        } else {
          setRefBillId((Integer)value);
        }
        break;

      case CLIENT:
        if (value == null) {
          unsetClient();
        } else {
          setClient((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case REF_BILL_ID:
        return Integer.valueOf(getRefBillId());

      case CLIENT:
        return getClient();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case REF_BILL_ID:
        return isSetRefBillId();
      case CLIENT:
        return isSetClient();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof withdraw_quote_args)
        return this.equals((withdraw_quote_args)that);
      return false;
    }

    public boolean equals(withdraw_quote_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_refBillId = true;
      boolean that_present_refBillId = true;
      if (this_present_refBillId || that_present_refBillId) {
        if (!(this_present_refBillId && that_present_refBillId))
          return false;
        if (this.refBillId != that.refBillId)
          return false;
      }

      boolean this_present_client = true && this.isSetClient();
      boolean that_present_client = true && that.isSetClient();
      if (this_present_client || that_present_client) {
        if (!(this_present_client && that_present_client))
          return false;
        if (!this.client.equals(that.client))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(withdraw_quote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      withdraw_quote_args typedOther = (withdraw_quote_args)other;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRefBillId()).compareTo(typedOther.isSetRefBillId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefBillId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refBillId, typedOther.refBillId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClient()).compareTo(typedOther.isSetClient());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClient()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client, typedOther.client);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("withdraw_quote_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("refBillId:");
      sb.append(this.refBillId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("client:");
      if (this.client == null) {
        sb.append("null");
      } else {
        sb.append(this.client);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class withdraw_quote_argsStandardSchemeFactory implements SchemeFactory {
      public withdraw_quote_argsStandardScheme getScheme() {
        return new withdraw_quote_argsStandardScheme();
      }
    }

    private static class withdraw_quote_argsStandardScheme extends StandardScheme<withdraw_quote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, withdraw_quote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REF_BILL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.refBillId = iprot.readI32();
                struct.setRefBillIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.client = iprot.readString();
                struct.setClientIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, withdraw_quote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REF_BILL_ID_FIELD_DESC);
        oprot.writeI32(struct.refBillId);
        oprot.writeFieldEnd();
        if (struct.client != null) {
          oprot.writeFieldBegin(CLIENT_FIELD_DESC);
          oprot.writeString(struct.client);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class withdraw_quote_argsTupleSchemeFactory implements SchemeFactory {
      public withdraw_quote_argsTupleScheme getScheme() {
        return new withdraw_quote_argsTupleScheme();
      }
    }

    private static class withdraw_quote_argsTupleScheme extends TupleScheme<withdraw_quote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, withdraw_quote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetRefBillId()) {
          optionals.set(1);
        }
        if (struct.isSetClient()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetRefBillId()) {
          oprot.writeI32(struct.refBillId);
        }
        if (struct.isSetClient()) {
          oprot.writeString(struct.client);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, withdraw_quote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.refBillId = iprot.readI32();
          struct.setRefBillIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.client = iprot.readString();
          struct.setClientIsSet(true);
        }
      }
    }

  }

  public static class withdraw_quote_result implements org.apache.thrift.TBase<withdraw_quote_result, withdraw_quote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdraw_quote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new withdraw_quote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new withdraw_quote_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdraw_quote_result.class, metaDataMap);
    }

    public withdraw_quote_result() {
    }

    public withdraw_quote_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public withdraw_quote_result(withdraw_quote_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public withdraw_quote_result deepCopy() {
      return new withdraw_quote_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public withdraw_quote_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof withdraw_quote_result)
        return this.equals((withdraw_quote_result)that);
      return false;
    }

    public boolean equals(withdraw_quote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(withdraw_quote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      withdraw_quote_result typedOther = (withdraw_quote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("withdraw_quote_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class withdraw_quote_resultStandardSchemeFactory implements SchemeFactory {
      public withdraw_quote_resultStandardScheme getScheme() {
        return new withdraw_quote_resultStandardScheme();
      }
    }

    private static class withdraw_quote_resultStandardScheme extends StandardScheme<withdraw_quote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, withdraw_quote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, withdraw_quote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class withdraw_quote_resultTupleSchemeFactory implements SchemeFactory {
      public withdraw_quote_resultTupleScheme getScheme() {
        return new withdraw_quote_resultTupleScheme();
      }
    }

    private static class withdraw_quote_resultTupleScheme extends TupleScheme<withdraw_quote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, withdraw_quote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, withdraw_quote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
